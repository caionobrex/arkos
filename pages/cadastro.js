import Head from 'next/head'
import Link from 'next/link'
import Image from 'next/image'
import InputField from '../components/InputField'
import Logo from '../public/imgs/logo.svg'
import RegisterPageImg from '../public/register-page-img.svg'
import { Formik } from 'formik'
import { MdSend, MdError, MdSync } from 'react-icons/md'
import { signIn as login } from 'next-auth/client'
import { useRouter } from 'next/router'
import { useState } from 'react'
import { useUser } from '../context/userContext'
import { toast } from 'react-hot-toast'

const RegisterCard = ({ validate, onSubmitHandler, error }) => (
  <Formik
    initialValues={{ name: '', email: '', pass: '', confirmPass: '' }}
    validate={validate}
    onSubmit={onSubmitHandler}
  >
    {({
      values,
      errors,
      touched,
      handleChange,
      handleBlur,
      handleSubmit,
      isSubmitting
    }) => (
      <div className={`shadow-xl w-full rounded-xl border-2 transition-all duration-400 p-8 md:p-14 ${error ? 'border-red-500' : 'border-primary-lighter'}`}>
        <h1 className="text-center text-3xl font-medium text-gray-800">Cadastre-se</h1>
        <form className="block mt-10" onSubmit={handleSubmit}>
          <div className="flex flex-col gap-y-6">
            <InputField
              type="text"
              name="name"
              label="Nome Completo"
              errors={errors}
              touched={touched}
              onChange={handleChange}
              onBlur={handleBlur}
            />
            <InputField
              type="email"
              name="email"
              label="Email"
              errors={errors}
              touched={touched}
              onChange={handleChange}
              onBlur={handleBlur}
            />
            <InputField
              type="password"
              name="pass"
              label="Senha"
              errors={errors}
              touched={touched}
              onChange={handleChange}
              onBlur={handleBlur}
            />
            <InputField
              type="password"
              name="confirmPass"
              label="Confirmar"
              errors={errors}
              touched={touched}
              onChange={handleChange}
              onBlur={handleBlur}
            />
          </div>
          <div className="flex flex-col items-center gap-y-8 mt-12">
            <button
              type="submit"
              disabled={isSubmitting}
              className="flex items-center gap-x-3 rounded-xl bg-primary px-20 py-2 border-2 border-primary text-white transition-all hover:text-gray-700 hover:bg-transparent"
            >
              {isSubmitting ? 'Envinado' : 'Enviar'} {isSubmitting ? <MdSync className="text-xl animate-spin text-lg" /> : <MdSend className="text-lg" />}
            </button>
            <span className="text-sm">
              Já possui cadastro ? <Link href="/login"><a className="text-blue-500">Login</a></Link>
            </span>
          </div>
        </form>
      </div>
    )}
  </Formik>
)

export default function RegisterPage() {
  const router = useRouter()
  const { user, signIn } = useUser()
  const [error, setError] = useState(false)
  
  const validate = (values) => {
    const errors = {}
    if (!values.name) errors.name = 'Campo obrigatório.'
    if (!values.email) errors.email = 'Campo obrigatório.'
    if (!values.pass) errors.pass = 'Campo obrigatório.'
    if (!values.confirmPass) errors.confirmPass = 'Campo obrigatório.'
    else if (values.pass != values.confirmPass) errors.confirmPass = 'Diferente da senha.'
    return errors
  }
  
  const onSubmitHandler = async (values, { setSubmitting }) => {
    const res = await fetch('/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(values)
    })
    if (res.status != 200) {
      setError(true)
      return toast.error('Usuário já cadastrado.')
    }
    const user = await res.json()
    login('credentials', {
      redirect: false,
      username: values.email,
      password: values.pass
    }).then((res) => {
      if (res.status == 200) {
        signIn(user)
        router.push('/produtos')
      }
    })
  }
  
  return (
    <>
      <Head>
        <title>Página de Registro</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <div className="flex flex-col md:flex-row min-h-screen">
        <div className="col bg-blue-100 flex items-center justify-center flex-col px-4">
          <div className="my-5 md:absolute left-15 top-4">
            <Image src={Logo} />
          </div>
          <Image src={RegisterPageImg} />
        </div>
        
        <div className="col flex items-center px-4 py-16 md:p-16 2xl:px-56">
          <RegisterCard
            validate={validate}
            onSubmitHandler={onSubmitHandler}
            error={error}
          />
        </div>
      </div>
    </>
  )
}